<?php

declare(strict_types=1);

/**
 * @class
 * @auth echo
 * @email 945462788@qq.com
 * @github https://github.com/945462788
 **/
namespace app\admin\controller;

use app\admin\middleware\AdminMiddleware;
use app\admin\service\system\MenuService;
use app\common\service\utils\ConstructorFormService;
use app\common\service\utils\TreeService;
use app\admin\middleware\AdminCheckMiddleware;
class Menu extends Base
{
    protected function initialize():void
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->service = MenuService::instance();
    }

    public function getAuthMenu()
    {
        $menu = cache('system.auth_menu_'.$this->request->role_id);

        app('response')->success($menu);
    }

    public function list()
    {
        if($this->request->isPost())
        {
            $result['data'] = $this->service->getList(null,null,'sort','asc');
            $result['total'] = count($result['data']);
            app('response')->success($result);
        }

        $menuList = $this->service->getList(null,null,'sort','asc');

        $treeService = TreeService::instance()->init($menuList,'menu_id');

        $menuList = $treeService->toTreeList();

        $this->assign('menuList',$menuList);

        $this->fetch();
    }

    public function quickEdit()
    {
        [$pk,$field,$value] = param_list(['menu_id',null],['field',''],['value',null]);

        if($this->service->quickUpdateData($pk,$field,$value))
        {
            app('response')->success('更新成功');
        }
        app('response')->fail('更新失败');
    }

    public function create()
    {
        if($this->request->isPost())
        {
            $param = $this->request->param();

            if($result = $this->service->createData('create',$param))
            {
                app('response')->success('新增成功');
            }
            app('response')->fail('新增失败');
        }

        $pid = $this->request->param('pid',null);

        $menuList = $this->service->getList(null,null,'sort','asc');

        $treeService = TreeService::instance()->init($menuList,'menu_id');

        $menuList = $treeService->toTreeList();

        if($pid)
        {
            $data['sort'] = $this->service->where('pid',$pid)->order('sort','desc')->value('sort');
        }else{
            $data['sort'] = $this->service->order('sort','desc')->value('sort');
        }

        $data['sort'] = $data['sort'] + 1;
        $data['pid']  = $pid;

        ConstructorFormService::create('添加菜单')
        ->addText('标题','title',true)
        ->addIcon('图标','icon',false)
        ->addText('地址','href')
        ->addTreeSelect('上级菜单','pid',false,get_tree_select($menuList,$data['pid'],'menu_id','pid','child',0))
        ->addText('排序','sort',100)
        ->addSwitch('启用','status')
        ->addSwitch('隐藏','is_hidden')
        ->setData($data)
        ->fetch();
    }

    public function update()
    {
        $pk = $this->request->param('menu_id');

        $menu = $this->service->findOrEmpty($pk);

        if($menu->isEmpty())
        {
            app('response')->fail('菜单不存在');
        }

        if($this->request->isPost())
        {
            $param = $this->request->param();

            if($result = $this->service->updateData($pk,'update',$param))
            {
                app('response')->success('更新成功');
            }
            app('response')->fail('更新失败');
        }

        $menuList = $this->service->getList(null,null,'sort','asc');

        $treeService = TreeService::instance()->init($menuList,'menu_id');

        $menuList = $treeService->toTreeList();

        ConstructorFormService::create('添加菜单')
        ->addHide('menu_id',$pk)
        ->addText('标题','title',true)
        ->addIcon('图标','icon')
        ->addText('地址','href')
        ->addTreeSelect('上级菜单','pid',false,get_tree_select($menuList,$menu['pid'],'menu_id','pid','child',0))
        ->addText('排序','sort',100)
        ->addSwitch('启用','status')
        ->addSwitch('隐藏','is_hidden')
        ->setData($menu)
        ->fetch();
    }

    public function delete()
    {
        if($this->request->isPost())
        {
            $pk = $this->request->param('menu_id');

            $pk = explode(',',$pk);

            $menuList = $this->service->getList(null,null,'sort','asc');

            $treeService = TreeService::instance()->init($menuList,'menu_id');
            
            $exclude = [];

            foreach($pk as $value)
            {
                $menu = $treeService->getchild($value);

                if(isset($menu['child']) || !empty($menu['child']))
                {
                    $exclude[] = $value;
                }
            }

            if(!empty($exclude))  app('response')->fail('存在子节点，不允许删除',[],40002);

            if($result = $this->service->deleteData($pk,$exclude))
            {
                app('response')->success('删除成功,条数:'.$result);
            }

            app('response')->fail('删除失败');
        }
        

    }   
}